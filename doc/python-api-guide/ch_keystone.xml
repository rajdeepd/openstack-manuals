<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="ch_obtaining_images">
        <title>Keystone</title>
        <?dbhtml stop-chunking?>
    <para>The simplest way to use Openstack API samples is to run on the same machine where openstack is installed.
        </para>
        <section xml:id="list_roles">
            <title>List Roles</title>
        <para>
                The following program lists all the roles available in the OpenStack</para>
        <programlisting language="python">
import keystoneclient.v2_0.client as ksclient
from credentials import get_credentials
from credentials import get_credentials_tenant

credentials = get_credentials()
try:
    keystone = ksclient.Client(**credentials)
    tenants_list = keystone.tenants.list()
    for t in tenants_list:
        print t.name
        credentials_tenant = get_credentials_tenant(t.name)
        try:
            keystone_tenant = ksclient.Client(**credentials_tenant)
            roles = keystone_tenant.roles.list()
            for r in roles:
                print r
        except Exception as inst:
            print 'Exception %s' % inst
            break
finally:
    print "Execution Completed." </programlisting>
	<para>
	The following is the output of the script
        </para>
        <screen>
		TBD
	</screen> 
        </section>

        <section xml:id="create_role">
            <title>Create Role</title>
        <para>
                The following program creates a role.</para>
        <programlisting language="python">
import keystoneclient.v2_0.client as ksclient
from credentials import get_credentials

credentials = get_credentials()
try:
    keystone = ksclient.Client(**credentials)
    print keystone.auth_url
    #Looks like a potential bug
    if keystone.auth_url != keystone.management_url:
        keystone.management_url = keystone.auth_url

    role_name = "role1"
    role_exists = False
    roles = keystone.roles.list()
    for r in roles:
        if r.name == role_name:
            role_exists = True

    if role_exists:
        print "%s already exists" % role_name

    else:
        user_role = keystone.roles.create(role_name)
        print "Created role %s" % role_name
finally:
    print "Execution Completed."
        </programlisting>
	<para>
	The following is the output of the script
        </para>
        <screen>
		TBD
	</screen> 
    </section>

        <section xml:id="list_tenants">
            <title>List Tenants</title>
        <para>
                The following program lists all the tenants</para>
        <programlisting language="python">
import keystoneclient.v2_0.client as ksclient
from credentials import get_credentials

credentials = get_credentials()
try:
    keystone = ksclient.Client(**credentials)
    print keystone.auth_url
    #Looks like a potential bug
    if keystone.auth_url != keystone.management_url:
        keystone.management_url = keystone.auth_url

    tenants_list = keystone.tenants.list()
    for t in tenants_list:
        print t

finally:
    print "Execution Completed."
        </programlisting>
	<para>
	The following is the output of the script
        </para>
        <screen>
		TBD
	</screen> 
    </section>

        <section xml:id="create_tenant">
            <title>Create Tenant</title>
        <para>
                The following program creates a tenant</para>
        <programlisting language="python">
import keystoneclient.v2_0.client as ksclient
from credentials import get_credentials

credentials = get_credentials()
try:
    keystone = ksclient.Client(**credentials)
    print keystone.auth_url
    #Looks like a potential bug
    #if keystone.auth_url != keystone.management_url:
    #    keystone.management_url = keystone.auth_url
    tenant_name = 'user3-project'
    tenant_exists = False

    tenants_list = keystone.tenants.list()
    for t in tenants_list:
        if t.name ==  tenant_name:
            tenant_exists = True
    if tenant_exists :
        print 'Tenant %s exists.' % tenant_name
    else:
        print 'Creating tenant %s ' % tenant_name
        req_body = {
            "tenant": {
                "name": tenant_name,
                "description": "Tenant  user3-project",
                "enabled": True,
                "extravalue01": "metadata01",
            },
        }
        tenant = keystone.tenants.create(
            req_body['tenant']['name'],
            req_body['tenant']['description'],
            req_body['tenant']['enabled']
            )
        print tenant

finally:
    print "Execution Completed."
        </programlisting>
	<para>
	The following is the output of the script
        </para>
        <screen>
		TBD
	</screen> 
    </section>

</chapter>
